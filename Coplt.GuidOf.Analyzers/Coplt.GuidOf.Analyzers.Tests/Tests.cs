using System.Linq;
using Coplt.Analyzers.Generators;
using Coplt.GuidOfs;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace Coplt.GuidOf.Analyzers.Tests;

public class Tests
{
    private const string Code = $@"using System;
using System.Runtime.InteropServices;
using Coplt.GuidOfs;

[Guid(""9B055807-B4EB-4E17-8C7A-A34C97B68F85"")]
public class Foo
{{
    public static void Some()
    {{
        var r = GuidType.Of<Foo>().Get();
        Console.WriteLine(r);
    }}
}}
";

    private const string GenOutput = $@"// <auto-generated/>

#nullable disable

using System;
using System.Runtime.CompilerServices;

namespace Coplt.GuidOfs
{{

internal static partial class GuidTypeStaticGenerated
{{
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Guid Get(this GuidType<Foo> type) => new Guid(0x9b055807,0xb4eb,0x4e17,0x8c,0x7a,0xa3,0x4c,0x97,0xb6,0x8f,0x85);

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static GuidOf<Foo> AsOf(this GuidType<Foo> type) => new GuidOf<Foo>(type.Get());
}}

}} // namespace Coplt.GuidOf
";

    [Fact]
    public static void Test()
    {
        var generator = new GuidOfGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);
        var compilation = CSharpCompilation.Create(nameof(Tests),
            [CSharpSyntaxTree.ParseText(Code)],
            [
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(GuidType).Assembly.Location),
            ]);
        var runResult = driver.RunGenerators(compilation).GetRunResult();
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("Foo.guid.of.g.cs"));
        Assert.Equal(GenOutput, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}
